// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qypGRFiT5EqbMS3JE3NhBQ
// Component: rw_Z0zjJpGE2PO
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import { useScreenVariants as useScreenVariantsgOmXfJvEYn5Htg } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: GOmXfJvEYn5HTG/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_planty.module.css"; // plasmic-import: qypGRFiT5EqbMS3JE3NhBQ/projectcss
import sty from "./PlasmicProductRow.module.css"; // plasmic-import: rw_Z0zjJpGE2PO/css

import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Yzi7tYpO3fZfz_/icon
import plant1FeaturedjpgDgf4DsOi7EoMgg from "./images/plant1Featuredjpg.png"; // plasmic-import: Dgf4DSOi7EoMgg/picture
import plant2Featuredjpg76Twe5RoEudK2 from "./images/plant2Featuredjpg.png"; // plasmic-import: 76TWE5RoEudK2-/picture
import plant5FeaturedjpgDZjGvEjsvkQmmr from "./images/plant5Featuredjpg.png"; // plasmic-import: dZjGVEjsvkQMMR/picture
import plant9Featuredjpg9KjstxP81Q0HB from "./images/plant9Featuredjpg.png"; // plasmic-import: _9KjstxP81Q0hB/picture

export type PlasmicProductRow__VariantMembers = {};
export type PlasmicProductRow__VariantsArgs = {};
type VariantPropType = keyof PlasmicProductRow__VariantsArgs;
export const PlasmicProductRow__VariantProps = new Array<VariantPropType>();

export type PlasmicProductRow__ArgsType = {};
type ArgPropType = keyof PlasmicProductRow__ArgsType;
export const PlasmicProductRow__ArgProps = new Array<ArgPropType>();

export type PlasmicProductRow__OverridesType = {
  root?: p.Flex<"div">;
};

export interface DefaultProductRowProps {
  className?: string;
}

function PlasmicProductRow__RenderFunc(props: {
  variants: PlasmicProductRow__VariantsArgs;
  args: PlasmicProductRow__ArgsType;
  overrides: PlasmicProductRow__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsgOmXfJvEYn5Htg()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_library_plasmic_color_type_css.plasmic_tokens,
          sty.root
        )}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__h1Eq7)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__v7ESi)}
            displayHeight={"270px /* plasmic-token: Wa3sKj20wwXUep */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: plant1FeaturedjpgDgf4DsOi7EoMgg,
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__paz6H)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg___9Vlo1)}
                role={"img"}
              />
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox___2ByG7)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__kPe9I
              )}
            >
              {"Nulla suscipit "}
            </a>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__yAh33
              )}
            >
              {"bigplants "}
            </div>

            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__euwuC
              )}
            >
              {"$49.40 "}
            </h5>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__atQta)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__asQr1)}
            displayHeight={"270px /* plasmic-token: Wa3sKj20wwXUep */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: plant2Featuredjpg76Twe5RoEudK2,
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox___1EK4D)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__xnF4V)}
                role={"img"}
              />
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__nqjWc)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__vA7Rz
              )}
            >
              {"Integer porta"}
            </a>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__x7X5G
              )}
            >
              {"cactuses"}
            </div>

            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__yinn
              )}
            >
              {"$99.00 "}
            </h5>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__aaOsk)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__rJsGp)}
            displayHeight={"270px /* plasmic-token: Wa3sKj20wwXUep */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: plant5FeaturedjpgDZjGvEjsvkQmmr,
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__dbZc0)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__rh82I)}
                role={"img"}
              />
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__aiAu)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link___08OG
              )}
            >
              {"Vestibulum eget"}
            </a>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__mpOvb
              )}
            >
              {"bigplants "}
            </div>

            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5__vV5Hu
              )}
            >
              {"$220.00 "}
            </h5>
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__wFihS)}
        >
          <p.PlasmicImg
            alt={""}
            className={classNames(sty.img__feBd0)}
            displayHeight={"270px /* plasmic-token: Wa3sKj20wwXUep */" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"100%" as const}
            loading={"lazy" as const}
            src={{
              src: plant9Featuredjpg9KjstxP81Q0HB,
              fullWidth: 400,
              fullHeight: 400,
              aspectRatio: undefined
            }}
          />

          {true ? (
            <div className={classNames(projectcss.all, sty.freeBox__vG5QR)}>
              <Icon3Icon
                className={classNames(projectcss.all, sty.svg__p30PB)}
                role={"img"}
              />
            </div>
          ) : null}

          <div className={classNames(projectcss.all, sty.freeBox__lExTr)}>
            <a
              className={classNames(
                projectcss.all,
                projectcss.a,
                projectcss.__wab_text,
                sty.link__hAz1B
              )}
            >
              {"Fusce sagittis"}
            </a>

            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vutjl
              )}
            >
              {"cactuses"}
            </div>

            <h5
              className={classNames(
                projectcss.all,
                projectcss.h5,
                projectcss.__wab_text,
                sty.h5___2QlQv
              )}
            >
              {"$400.40 "}
            </h5>
          </div>
        </p.Stack>
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicProductRow__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicProductRow__VariantsArgs;
    args?: PlasmicProductRow__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicProductRow__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicProductRow__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicProductRow__ArgProps,
          internalVariantPropNames: PlasmicProductRow__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicProductRow__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductRow";
  } else {
    func.displayName = `PlasmicProductRow.${nodeName}`;
  }
  return func;
}

export const PlasmicProductRow = Object.assign(
  // Top-level PlasmicProductRow renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicProductRow
    internalVariantProps: PlasmicProductRow__VariantProps,
    internalArgProps: PlasmicProductRow__ArgProps
  }
);

export default PlasmicProductRow;
/* prettier-ignore-end */
